@@ -27171,100 +27171,190 @@
 appingsTime);%0a%09%09%09%09WriteMappings( Channel );%0a%09%09%09%7d%0a%0a
+%09%09%09WriteCustomData( Channel, GSwarmDebugOptions.bForceContentExport ); // Extensibility+%0a%0a
 %09%09%09Swarm.CloseChannel( Channel );%0a%09%09%7d%0a%09%09else%0a%09%09%7b%0a%09
@@ -139095,100 +139095,427 @@
 nt32 Num() const%0a%09%7b%0a%09%09return RawStrings.Num();%0a%09%7d%0a
+%0a%09// Extensibility+: Begin%0a%09void Append(const TSet%3cFString%3e& Paths)%0a%09%7b%0a%09%09int32 Offset = Strings.Num();%0a%09%09for(const FString& Path : Paths)%0a%09%09%7b%0a%09%09%09Strings.Emplace(FPaths::EngineDir() / *Path);%0a%09%09%7d%0a%09%09for(int32 Index = Offset; Index %3c Strings.Num(); ++Index)%0a%09%09%7b%0a%09%09%09RawStrings.Add(*Strings%5bIndex%5d);%0a%09%09%7d%0a%09%7d%0a%09// Extensibility+: End%0a%0a
 private:%0a%09TArray%3cFString%3e Strings;%0a%09TArray%3cconst T
@@ -145643,100 +145643,490 @@
 umCompletedTasks = 0;%0a%09bRunningLightmass = false;%0a
+%0a%09// Extensibility+: Begin%0a%09FEngineDependencyPaths RequiredDependencyPaths = bUse64bitProcess ? RequiredDependencyPaths64 : RequiredDependencyPaths32;%0a%09FEngineDependencyPaths OptionalDependencyPaths = bUse64bitProcess ? OptionalDependencyPaths64 : OptionalDependencyPaths32;%0a%09RequiredDependencyPaths.Append(Exporter-%3eGetPluginBinaryDependencies(bUse64bitProcess));%0a%09// Extensibility+: End%0a%0a
 %09Statistics.SwarmJobOpenTime += FPlatformTime::Sec
@@ -149057,100 +149057,333 @@
 ionValues, UE_ARRAY_COUNT(DescriptionKeys) );%0a%09%7d%0a%09
+(bUse64bitProcess ? JobSpecification64 : JobSpecification32).AddDependencies( RequiredDependencyPaths.GetArray(), RequiredDependencyPaths.Num(), OptionalDependencyPaths.GetArray(), OptionalDependencyPaths.Num() ); // Extensibility+%0a%09
 int32 ErrorCode = Swarm.BeginJobSpecification( Job
