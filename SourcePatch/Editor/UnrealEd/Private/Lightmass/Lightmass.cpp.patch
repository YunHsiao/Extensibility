@@ -26971,500 +26971,595 @@
 Statistics::FScopedGather LandscapeInstanceStat(Stats.ExportLandscapeInstancesTime);%0a%09%09%09%09WriteLandscapeInstances( Channel );%0a%09%09%09%7d%0a%09%09%09%7b%0a%09%09%09%09FLightmassStatistics::FScopedGather MappingStat(Stats.ExportMappingsTime);%0a%09%09%09%09WriteMappings( Channel );%0a%09%09%09%7d%0a%0a
+%09%09%09WriteCustomData( Channel, GSwarmDebugOptions.bForceContentExport ); // @ExtensibilityTag()%0a%0a
 %0a%09%09%09Swarm.CloseChannel( Channel );%0a%09%09%7d%0a%09%09else%0a%09%09%7b%0a%09%09%09UE_LOG(LogLightmassSolver, Log,  TEXT(%22Error, OpenChannel failed to open %25s with error code %25d%22), *ChannelName, Channel );%0a%09%09%7d%0a%09%7d%0a%7d%0a%0abool FLightmassExporter::WriteToMaterialChannel(FLightmassStatis
@@ -138896,500 +138902,833 @@
 erve(Strings.Num());%0a%09%09for(const FString& String : Strings)%0a%09%09%7b%0a%09%09%09RawStrings.Add(*String);%0a%09%09%7d%0a%09%7d%0a%0a%09const TCHAR** GetArray() const%0a%09%7b%0a%09%09return const_cast%3cconst TCHAR**%3e(RawStrings.GetData());%0a%09%7d%0a%0a%09int32 Num() const%0a%09%7b%0a%09%09return RawStrings.Num();%0a%09%7d%0a%0a
+%09// @ExtensibilityTagBegin()%0a%0a%09void Append(const TSet%3cFString%3e& Paths)%0a%09%7b%0a%09%09int32 Offset = Strings.Num();%0a%09%09for(const FString& Path : Paths)%0a%09%09%7b%0a%09%09%09Strings.Emplace(FPaths::EngineDir() / *Path);%0a%09%09%7d%0a%09%09for(int32 Index = Offset; Index %3c Strings.Num(); ++Index)%0a%09%09%7b%0a%09%09%09RawStrings.Add(*Strings%5bIndex%5d);%0a%09%09%7d%0a%09%7d%0a%09// @ExtensibilityTagEnd()%0a%0a
 %0aprivate:%0a%09TArray%3cFString%3e Strings;%0a%09TArray%3cconst TCHAR*%3e RawStrings;%0a%7d;%0a%0abool FLightmassProcessor::BeginRun()%0a%7b%0a%09%7b%0a%09%09FLightmassStatistics::FScopedGather ExportStatScope(Statistics.ExportTime);%0a%09%09bool bGarbageCollectAfterExport = false;%0a%09%09VERIFYLIGHT
@@ -145444,500 +145458,999 @@
 * DescriptionValues%5b%5d =%0a%09%7b%0a%09%09MapName,%0a%09%09GameName,%0a%09%09QualityLevel%0a%09%7d;%0a%0a%09// Create the job - one task per mapping.%0a%09bProcessingSuccessful = false;%0a%09bProcessingFailed = false;%0a%09bQuitReceived = false;%0a%09NumCompletedTasks = 0;%0a%09bRunningLightmass = false;%0a%0a
+%09// @ExtensibilityTagBegin()%0a%0a%09FEngineDependencyPaths RequiredDependencyPaths = bUse64bitProcess ? RequiredDependencyPaths64 : RequiredDependencyPaths32;%0a%09FEngineDependencyPaths OptionalDependencyPaths = bUse64bitProcess ? OptionalDependencyPaths64 : OptionalDependencyPaths32;%0a%09RequiredDependencyPaths.Append(Exporter-%3eGetPluginBinaryDependencies(bUse64bitProcess, false));%0a%09OptionalDependencyPaths.Append(Exporter-%3eGetPluginBinaryDependencies(bUse64bitProcess, true));%0a%09// @ExtensibilityTagEnd()%0a%0a
 %0a%09Statistics.SwarmJobOpenTime += FPlatformTime::Seconds() - SwarmJobStartTime;%0a%09%0a%09UE_LOG(LogLightmassSolver, Log,  TEXT(%22Swarm launching: %25s %25s%22), bUse64bitProcess ? *LightmassExecutable64 : *LightmassExecutable32, *Exporter-%3eSceneGuid.ToString() );%0a
@@ -148959,500 +148981,739 @@
 redDependencyPaths64.GetArray(), RequiredDependencyPaths64.Num(), OptionalDependencyPaths64.GetArray(), OptionalDependencyPaths64.Num() );%0a%09%09JobSpecification64.AddDescription( DescriptionKeys, DescriptionValues, UE_ARRAY_COUNT(DescriptionKeys) );%0a%09%7d%0a
+%09(bUse64bitProcess ? JobSpecification64 : JobSpecification32).AddDependencies( RequiredDependencyPaths.GetArray(), RequiredDependencyPaths.Num(), OptionalDependencyPaths.GetArray(), OptionalDependencyPaths.Num() ); // @ExtensibilityTag()%0a%0a
 %09int32 ErrorCode = Swarm.BeginJobSpecification( JobSpecification32, JobSpecification64 );%0a%09if( ErrorCode %3c 0 )%0a%09%7b%0a%09%09UE_LOG(LogLightmassSolver, Log,  TEXT(%22Error, BeginJobSpecification failed with error code %25d%22), ErrorCode );%0a%09%09bProcessingFailed = tr
