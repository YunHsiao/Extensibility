@@ -6140,500 +6140,538 @@
 %7b%0a%09int32 NumTexels;%0a%09TRefCountPtr%3cFStaticLightingMapping%3e Mapping;%0a%7d;%0a%0a/** Always active singleton class which manages all static light systems and subsystems */%0aclass FStaticLightingManager : public TSharedFromThis%3cFStaticLightingManager%3e%0a%7b%0apublic:%0a
+%09UNREALED_API // @ExtensibilityTag()%0a%0a
 %09static TSharedPtr%3cFStaticLightingManager%3e Get();%0a%0a%09/** Processes lighting data that is now pending from a finished lightmass pass */%0a%09static void ProcessLightingData();%0a%09/** Stops lightmass from working, and discards the data */%0a%09static void CancelL
@@ -6902,500 +6908,606 @@
  for when the build finishes */%0a%09void SendBuildDoneNotification( bool AutoApplyFailed );%0a%0a%09/** Updates current notification with new text */%0a%09void SetNotificationText( FText Text );%0a%09%0a%09static void ImportRequested();%0a%09static void DiscardRequested();%0a%0a
+%09UNREALED_API void LaunchCustomSystem(class FStaticLightingSystem* CustomSystem); // @ExtensibilityTag()%0a%0a
 %09/** Initializes the static lighting system to defaults and kicks it off if possible */%0a%09void CreateStaticLightingSystem(const FLightingBuildOptions& Options);%0a%09/** Updates the build lighting with info from Lightmass, checking for completion */%0a%09void
@@ -8815,500 +8827,585 @@
 ld options.%0a%09 * @param InContext - The context (world, lighting scenario, world subsection, data layers)  we wish to build the lighting for%0a%09 */%0a%09FStaticLightingSystem(const FLightingBuildOptions& InOptions, FStaticLightingBuildContext&& InContext);%0a
+%09virtual // @ExtensibilityTag(: @Crysknife(MatchContext = Lower, MatchLength = 27))%0a%0a
 %09~FStaticLightingSystem();%0a%0a%09bool CheckLightmassExecutableVersion();%0a%09%0a%09/** Kicks off the lightmass processing, and, if successful, starts the asynchronous task */%0a%09bool BeginLightmassProcess();%0a%0a%09/** Updates the lightmass processor to query if the a
@@ -10192,508 +10210,572 @@
 ynchronous (lightmass in flight) */%0a%09bool IsAsyncBuilding() const;%0a%0a%09bool IsAmortizedExporting() const;%0a%0a%09bool ShouldOperateOnLevel(ULevel* InLevel) const%0a%09%7b%0a%09%09return InLevel && LightingContext.ShouldIncludeLevel(InLevel) && InLevel-%3ebIsVisible;%0a%09%7d%0a%0a
-private:
+// private: // @ExtensibilityTag(-)%0a%0a
+protected: // @ExtensibilityTag()%0a%0a
 %09/**%0a%09 * Generates mappings/meshes for all BSP in the given level%0a%09 *%0a%09 * @param Level Level to build BSP lighting info for%0a%09 * @param bBuildLightingForBSP If true, we need BSP mappings generated as well as the meshes%0a%09 */%0a%09void AddBSPStaticLightingI
@@ -11141,500 +11171,546 @@
 ing info, and adds it to the system. */%0a%09void AddPrimitiveStaticLightingInfo(FStaticLightingPrimitiveInfo& PrimitiveInfo, bool bBuildActorLighting, bool bDeferMapping);%0a%09%0a%09/** Makes the lightmass processor structure for handling import and export */%0a
+%09UNREALED_API virtual // @ExtensibilityTag()%0a%0a
 %09bool CreateLightmassProcessor();%0a%0a%09/** Collects the scene to be sent to the exporter */%0a%09void GatherScene();%0a%0a%09/** Runs initial export code of the lightmass processor */%0a%09bool InitiateLightmassProcessor();%0a%0a%09/**%0a%09 * Reports lighting build statistics
@@ -11639,500 +11675,655 @@
 %09/**%0a%09 * Reports lighting build statistics to the log.%0a%09 */%0a%09void ReportStatistics( );%0a%0a%09/** Collects all static lighting info for processing */%0a%09void GatherStaticLightingInfo(bool bRebuildDirtyGeometryForLighting, bool bForceNoPrecomputedLighting);%0a
+%09virtual bool CustomizePrimitiveInfo(UPrimitiveComponent* Primitive, FStaticLightingPrimitiveInfo& PrimitiveInfo) %7b return true; %7d // @ExtensibilityTag()%0a%0a
 %09%0a%09/** After importing, textures need to be encoded to be used */%0a%09void EncodeTextures(bool bLightingSuccessful);%0a%0a%09/** Pushes newly collected lightmaps on to the level */%0a%09void ApplyNewLightingData(bool bSuccessful);%0a%09%0a%09void CompleteDeterministicMap
@@ -11960,506 +12002,533 @@
 taticLightingPrimitiveInfo& PrimitiveInfo) %7b return true; %7d // @ExtensibilityTag()%0a%0a%09%0a%09/** After importing, textures need to be encoded to be used */%0a%09void EncodeTextures(bool bLightingSuccessful);%0a%0a%09/** Pushes newly collected lightmaps on to the level */%0a
+%09virtual // @ExtensibilityTag()%0a%0a
 %09void ApplyNewLightingData(bool bSuccessful);%0a%09%0a%09void CompleteDeterministicMappings(class FLightmassProcessor* LightmassProcessor);%0a%09%0a%09/** Invalidates the lighting of the current levels so new lighting can be applied */%0a%09void InvalidateStaticLighting
@@ -13008,508 +13050,571 @@
 is present in the scene.%0a%09 */%0a%09void UpdateAutomaticImportanceVolumeBounds( const FBox& MeshBounds );%0a%0a%09/** Populate BuildDataResourcesToKeep from the GUIDs referenced in the given level. */%0a%09void GatherBuildDataResourcesToKeep(const ULevel* Level);%0a%0a
-private:
+// private: // @ExtensibilityTag(-: @Crysknife(MatchContext = Lower))%0a%0a
 %0a%0a%09/** The lights in the world which the system is building. */%0a%09TArray%3cULightComponentBase*%3e Lights;%0a%0a%09/** The options the system is building lighting with. */%0a%09const FLightingBuildOptions Options;%0a%0a%09/** true if the static lighting build has been ca
@@ -15147,500 +15195,599 @@
 e resource guid for all hidden/excluded levels. Used to keep those level data valid. */%0a%09TSet%3cFGuid%3e BuildDataResourcesToKeep;%0a%0a%09/** A handle on the processor that actually interfaces with Lightmass */%0a%09class FLightmassProcessor* LightmassProcessor;%0a
+%09bool bForceAllowStaticLighting = false; // @ExtensibilityTag(: @Crysknife(MatchContext = Lower))%0a%0a
 %0a%09friend FStaticLightingManager;%0a%09friend FLightmassProcessor;%0a%7d;%0a%0a/** %0a * Types used for debugging static lighting.  %0a * NOTE: These must remain binary compatible with the ones in Lightmass.%0a */%0a%0a#if !PLATFORM_MAC && !PLATFORM_LINUX%0a%09#pragma pack(pus
